var security=angular.module("security",["ngCookies"]);security.provider("$securityConfig",[function(){var e={},t=void 0,n=void 0,r=void 0,i=!0,s={401:"notAuthenticated",403:"notAuthorized",419:"sessionTimeout",440:"sessionTimeout"};this.addInterceptUrl=function(e,t){if(angular.isDefined(t)&&angular.isDefined(t.urls))angular.isArray(t.urls)?angular.forEach(t.urls,function(e){o(e,t.accessRoles)}):o(t.urls,t.accessRoles);else{var n=angular.isDefined(t)?t.accessRoles:void 0;o(e,n)}return e};var o=function(t,n){e[t]=angular.isDefined(n)?n:[]};this.setRedirectAuthenticatedUrl=function(e){i=e},this.isRedirectAuthenticatedUrl=function(){return i},this.setNotAuthenticatedUrl=function(e){return n=e,this},this.getNotAuthenticatedUrl=function(){return n},this.setNotAuthorizedUrl=function(e){return t=e,this},this.getNotAuthorizedUrl=function(){return t},this.setAuthHttpEvents=function(e){return angular.extend(s,e),this},this.getAuthHttpEvents=function(){return s},this.setCredentialNameStored=function(e){return r=e,this},this.getCredentialNameStored=function(){return r},this.getInterceptUrls=function(){return e},this.isInterceptUrls=function(e){return angular.isDefined(this.getInterceptUrls()[e])},this.$get=function(){return this}}]),security.config(["$httpProvider",function(e){e.interceptors.push(["$injector",function(e){return e.get("AutorizacaoInterceptor")}])}]),security.run(["$rootScope","$location","$securityConfig","$q","Credential",function(e,t,n,r,i){e.$on("$locationChangeStart",function(s,o,a){var u=t.path(),c=t.search(),l=r.defer();e.$broadcast("validUser",l),l.promise.then(function(){if(n.isInterceptUrls(u)){if(0==i.getUserRoles().length){var s=r.defer();e.$broadcast("findUserRoles",s),s.promise.then(function(e){i.setUserRoles(e)},function(e){i.setUserRoles([])})}var o=n.getInterceptUrls()[u];if(angular.isDefined(o)&&o.length>0){var a=r.defer();e.$broadcast("validAccess",a,angular.copy(n.getInterceptUrls()[t.path()])),a.promise.then(function(){},function(){t.path(n.getNotAuthorizedUrl())})}}},function(){if(i.invalidate(),!angular.equals(n.getNotAuthenticatedUrl(),u)){var e={};n.isRedirectAuthenticatedUrl()&&(e.url=u,angular.isDefined(c)&&angular.forEach(c,function(t,n){e[n]=t})),n.isInterceptUrls(u)&&t.path(n.getNotAuthenticatedUrl()).search(e)}})})}]),security.factory("AutorizacaoInterceptor",["$rootScope","$q","$securityConfig","Credential","$location",function(e,t,n,r,i){return{request:function(e){return e.headers.Authorization=r.getToken(),e||t.when(e)},responseError:function(s){return n.isInterceptUrls(i.path())&&e.$broadcast(n.getAuthHttpEvents()[s.status],r),n.getAuthHttpEvents()[s.status]&&(s.data=void 0),t.reject(s)}}}]),security.service("Credential",["$rootScope","$q","$cookieStore","$securityConfig",function(e,t,n,r){var i=this,s=void 0,o=n.get(r.getCredentialNameStored());return angular.isDefined(o)&&(s=o),this.init=function(e,t){i.init(e,t,void 0)},this.init=function(o,a,u){if(s={},s.token=a,s.userName=o,n.put(r.getCredentialNameStored(),s),angular.isDefined(u)&&u.length>0)s.userRoles=u;else{var c=t.defer();e.$broadcast("findUserRoles",c),c.promise.then(function(e){i.setUserRoles(e)},function(e){i.setUserRoles([])})}e.$broadcast("initCredential",i)},this.invalidate=function(){angular.isDefined(s)&&(s.token=void 0,s.userName=void 0),n.remove(r.getCredentialNameStored()),e.$broadcast("invalidateCredential")},this.isActive=function(){return angular.isDefined(s)&&angular.isDefined(s.token)},this.getToken=function(){return i.isActive()&&angular.isDefined(s.token)?s.token:""},this.setUserRoles=function(e){s.userRoles=angular.extend([],e)},this.getUserRoles=function(){return i.isActive()&&angular.isDefined(s.userRoles)?s.userRoles:[]},this.getUserName=function(){return i.isActive()&&angular.isDefined(s.userName)?s.userName:""},i}]),security.service("$security",["$rootScope","$q","Credential",function(e,t,n){this.hasRoles=function(e){var t=!1;return angular.isArray(e)&&e.length>0?angular.forEach(e,function(e){-1!=n.getUserRoles().indexOf(e)&&(t=!0)}):t=-1!=n.getUserRoles().indexOf(e),t},this.hasRolesAsync=function(n){var r=t.defer(),i=t.defer();return e.$broadcast("findUserRoles",i),i.promise.then(function(e){var t=e;angular.isArray(n)&&n.length>0?angular.forEach(n,function(e){-1!=t.indexOf(e)&&r.resolve()}):-1!=t.indexOf(n)?r.resolve():r.reject()},function(e){r.reject()}),r},this.hasUserValid=function(){return n.isActive()},this.currentUserName=function(){return n.getUserName()}}]);